{% raw %}---
- name: make sure project directory is owned by uwsgi group
  file: path={{ project_path }} state=directory owner={{user}} group={{uwsgi_group}} recurse=yes
  tags: ['configure']

- name: get the latest code
  git: repo={{ project_repo_url }} dest={{ project_path }} version={{ repo_version }} accept_hostkey=true
  become: false
  register: gitresult
  when: vm == 0
  tags: ['always']

- debug: msg="Git SHA-1 before={{ gitresult.before }} after={{ gitresult.after }}"
  tags: ['always']

- name: copy django-uwsgi logrotate
  template: src=django.logrotate.j2
            dest=/etc/logrotate.d/uwsgi-{{ environment}}-{{project_name}}-django
            mode=644
  tags: ['configure']

- name: make sure log directory exists
  file: path={{ project_log_dir }} state=directory owner={{uwsgi_user}} group={{uwsgi_group}} mode=751 recurse=yes
  tags: ['configure']

- name: ensure python virtualenv exist
  command: virtualenv {{ venv_path }} -p python3 creates={{ venv_path }}
  become: false
  tags: ['always']

- name: install django python dependencies
  pip: requirements={{ project_path }}/{{ django_requirements_file }}  executable={{ venv_path }}/bin/pip
  become: false
  tags: ['deploy']

- name: Install packages based on package.json.
  npm: path={{ project_path }} global=no
  become: true
  when: sass_with_django_compressor
  tags: ['deploy']

- name: copy env configuration
  template: src=env.env.j2 dest={{ project_path }}/.env force=no
  become: false
  tags: ['configure']

- name: collect static
  django_manage: command=collectstatic app_path={{ project_path }} virtualenv={{ venv_path }}
  become: false
  tags: ['deploy']

- name: Run django-compressor offline
  django_manage: command=compress app_path={{ project_path }} virtualenv={{ venv_path }}
  become: false
  tags: ['deploy']
  when: sass_with_django_compressor
  environment:
    PATH: "$PATH:{{ project_path }}/node_modules/.bin:/usr/bin/"

- name: Run database migrations
  django_manage: command=migrate app_path={{ project_path }} virtualenv={{ venv_path }}
  become: false
  tags: ['deploy']
#  notify: reload celery  ## Uncomment this when project is using celery

- name: Build documentation for "/docs" url.
  command: "{{ venv_path }}/bin/mkdocs build"
  args:
    chdir: "{{ project_path }}"
  become: false
  tags: ['deploy', 'documentation']

- name: copy uwsgi configuration
  template: src=django.uwsgi.ini.j2
            dest={{ uwsgi_conf_path }}//django-{{project_name}}-{{ environment }}.ini
            mode=644
  tags: ['deploy']
  register: uwsgiconf

- name: reload uwsgi processes
  command: uwsgi --reload {{ uwsgi_pid_file }}
  become: true
  when: not uwsgiconf.changed
  tags: ['deploy']
{% endraw %}
