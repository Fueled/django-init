{% raw %}---
- name: get the latest code
  git: repo={{ project_repo_url }} dest={{ project_path }} version={{ repo_version }} accept_hostkey=true
  become: false
  register: gitresult
  when: vm == 0
  tags: ['always']

- debug: msg="Git SHA-1 before={{ gitresult.before }} after={{ gitresult.after }}"
  when: vm == 0
  tags: ['always']

- name: Install virtualenv via pip
  pip:
    name: virtualenv
    executable: pip3
  tags: ['configure']

- name: ensure python virtualenv exist
  pip:
    virtualenv: "{{ venv_path }}"
    requirements: "{{ project_path }}/{{ django_requirements_file }}"
    virtualenv_python: python3.9
  become: false
  tags: ['always']

- name: Install binaries for postgres postgis
  apt:
    pkg:
      - gdal-bin
    state: present
    cache_valid_time: 300
  when: pg_gis

- name: copy env configuration
  template: src=env.env.j2 dest={{ project_path }}/.env force=no
  become: false
  tags: ['configure']

- name: install gettext for translations
  apt:
    pkg: gettext
    state: present

- name: collect static
  django_manage: command=collectstatic app_path={{ project_path }} virtualenv={{ venv_path }}
  become: false
  tags: ['deploy']

- name: Run database migrations
  django_manage: command=migrate app_path={{ project_path }} virtualenv={{ venv_path }}
  become: false
  tags: ['deploy']

- import_tasks: uwsgi-setup.yml

- name: run compilemessages for static translations
  django_manage: command=compilemessages app_path={{ project_path }} virtualenv={{ venv_path }}
  become: false
  tags: ['deploy']

- name: reload uwsgi processes
  command: uwsgi --reload {{ uwsgi_pid_file }}
  become: true
  when: not uwsgiconf.changed
  tags: ['deploy']{% endraw %}
  {%- if cookiecutter.add_celery.lower() == 'y' %}
  notify: reload celery  # reload celery everytime uwsgi conf changes
  {%- endif %}

{% raw %}- name: apt_get install graphviz for db schema generation
  apt: pkg=graphviz state=present

- name: Generate DB Schema.
  shell: "source {{ venv_path }}/bin/activate && python bin/generate_db_schema.py"
  args:
    chdir: "{{ project_path }}"
    executable: /bin/bash
  become: false
  tags: ['deploy', 'documentation']

- name: Build documentation for "/docs" url.
  command: "{{ venv_path }}/bin/mkdocs build"
  args:
    chdir: "{{ project_path }}"
  become: false
  tags: ['deploy', 'documentation']{% endraw %}
